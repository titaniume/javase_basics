package cn.titanium.classandobject;


/**
 * 单例模式
 * @author Administrator
 *2017年10月11日上午10:09:41
 */
public class Singletonpattern {
	//LOL里有一个怪叫大龙GiantDragon，只有一只，所以该类，只能被实例化一次
	//1,单例模式：单例模式有叫做 Singleton模式，指的的一个类，在一个JVM里，只有一个实例存在。
	//2,饿汉式单例模式	
	/*GiantDragon 应该只有一只，通过私有化其构造方法，使得外部无法通过new 得到新的实例。
    GiantDragon 提供了一个public static的getInstance方法，外部调用者通过该方法获取12行定义的对象，
           而且每一次都是获取同一个对象。 从而达到单例的目的。这种单例模式又叫做饿汉式单例模式，无论如何都会创建一个实例*/

	//3,懒汉式单例模式
	//懒汉式单例模式与饿汉式单例模式不同，只有在调用getInstance的时候，才会创建实例
	
	//4,什么时候使用饿汉式，什么时候使用懒汉式
	/*饿汉式是立即加载的方式，无论是否会用到这个对象，都会加载。
	如果在构造方法里写了性能消耗较大，占时较久的代码，比如建立与数据库的连接，那么就会在启动的时候感觉稍微有些卡顿。
	
	懒汉式，是延迟加载的方式，只有使用的时候才会加载。
	使用懒汉式，在启动的时候，会感觉到比饿汉式略快，因为并没有做对象的实例化。 但是在第一次调用的时候，会进行实例化操作，感觉上就略慢。
	看业务需求，如果业务上允许有比较充分的启动和初始化时间，就使用饿汉式，否则就使用懒汉式
	*/
	
	
	//5;单例模式三元素
	//什么是单例模式？
/*	1,构造方法私有化
	2,静态属性指向实例
	3,public static 的getinstance()方法,返回第二步的静态属性*/
	
	//练习：使用饿汉式单例模式, 把Hero类改造成为单例模式 使用懒汉式单例模式，把Item类改造成为单例模式


	
	

}
